// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlelog.proto

#include "battlelog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_battlelog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogMessage_battlelog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_battlelog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogUser_battlelog_2eproto;
namespace proto {
class BattleLogUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleLogUser> _instance;
} _BattleLogUser_default_instance_;
class BattleLogMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleLogMessage> _instance;
} _BattleLogMessage_default_instance_;
class BattleLogFileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BattleLogFile> _instance;
} _BattleLogFile_default_instance_;
}  // namespace proto
static void InitDefaultsscc_info_BattleLogFile_battlelog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleLogFile_default_instance_;
    new (ptr) ::proto::BattleLogFile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleLogFile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BattleLogFile_battlelog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BattleLogFile_battlelog_2eproto}, {
      &scc_info_BattleLogUser_battlelog_2eproto.base,
      &scc_info_BattleLogMessage_battlelog_2eproto.base,}};

static void InitDefaultsscc_info_BattleLogMessage_battlelog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleLogMessage_default_instance_;
    new (ptr) ::proto::BattleLogMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleLogMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogMessage_battlelog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleLogMessage_battlelog_2eproto}, {}};

static void InitDefaultsscc_info_BattleLogUser_battlelog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::_BattleLogUser_default_instance_;
    new (ptr) ::proto::BattleLogUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::BattleLogUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BattleLogUser_battlelog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BattleLogUser_battlelog_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_battlelog_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_battlelog_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_battlelog_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_battlelog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, user_name_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, pilot_name_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, game_param_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, battle_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, win_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, lose_count_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogUser, platform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogMessage, user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogMessage, body_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogMessage, seq_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, game_disk_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, gdxsv_version_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, battle_code_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, log_file_version_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, rule_bin_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, users_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, battle_data_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, start_at_),
  PROTOBUF_FIELD_OFFSET(::proto::BattleLogFile, end_at_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::proto::BattleLogUser)},
  { 13, -1, sizeof(::proto::BattleLogMessage)},
  { 22, -1, sizeof(::proto::BattleLogFile)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleLogUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleLogMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::proto::_BattleLogFile_default_instance_),
};

const char descriptor_table_protodef_battlelog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017battlelog.proto\022\005proto\"\252\001\n\rBattleLogUs"
  "er\022\017\n\007user_id\030\001 \001(\t\022\021\n\tuser_name\030\002 \001(\t\022\022"
  "\n\npilot_name\030\003 \001(\t\022\022\n\ngame_param\030\004 \001(\014\022\024"
  "\n\014battle_count\030\005 \001(\005\022\021\n\twin_count\030\006 \001(\005\022"
  "\022\n\nlose_count\030\007 \001(\005\022\020\n\010platform\030\n \001(\t\"Q\n"
  "\020BattleLogMessage\022\017\n\007user_id\030\001 \001(\t\022\014\n\004bo"
  "dy\030\002 \001(\014\022\013\n\003seq\030\003 \001(\r\022\021\n\ttimestamp\030\n \001(\003"
  "\"\357\001\n\rBattleLogFile\022\021\n\tgame_disk\030\005 \001(\t\022\025\n"
  "\rgdxsv_version\030\002 \001(\t\022\023\n\013battle_code\030\003 \001("
  "\t\022\030\n\020log_file_version\030\004 \001(\005\022\020\n\010rule_bin\030"
  "\n \001(\014\022#\n\005users\030\013 \003(\0132\024.proto.BattleLogUs"
  "er\022,\n\013battle_data\030\014 \003(\0132\027.proto.BattleLo"
  "gMessage\022\020\n\010start_at\030\024 \001(\003\022\016\n\006end_at\030\025 \001"
  "(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_battlelog_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_battlelog_2eproto_sccs[3] = {
  &scc_info_BattleLogFile_battlelog_2eproto.base,
  &scc_info_BattleLogMessage_battlelog_2eproto.base,
  &scc_info_BattleLogUser_battlelog_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_battlelog_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battlelog_2eproto = {
  false, false, descriptor_table_protodef_battlelog_2eproto, "battlelog.proto", 530,
  &descriptor_table_battlelog_2eproto_once, descriptor_table_battlelog_2eproto_sccs, descriptor_table_battlelog_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_battlelog_2eproto::offsets,
  file_level_metadata_battlelog_2eproto, 3, file_level_enum_descriptors_battlelog_2eproto, file_level_service_descriptors_battlelog_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_battlelog_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_battlelog_2eproto)), true);
namespace proto {

// ===================================================================

void BattleLogUser::InitAsDefaultInstance() {
}
class BattleLogUser::_Internal {
 public:
};

BattleLogUser::BattleLogUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleLogUser)
}
BattleLogUser::BattleLogUser(const BattleLogUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_name().empty()) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_name(),
      GetArena());
  }
  pilot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pilot_name().empty()) {
    pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pilot_name(),
      GetArena());
  }
  game_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_param().empty()) {
    game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_param(),
      GetArena());
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_platform(),
      GetArena());
  }
  ::memcpy(&battle_count_, &from.battle_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&lose_count_) -
    reinterpret_cast<char*>(&battle_count_)) + sizeof(lose_count_));
  // @@protoc_insertion_point(copy_constructor:proto.BattleLogUser)
}

void BattleLogUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleLogUser_battlelog_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pilot_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&battle_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lose_count_) -
      reinterpret_cast<char*>(&battle_count_)) + sizeof(lose_count_));
}

BattleLogUser::~BattleLogUser() {
  // @@protoc_insertion_point(destructor:proto.BattleLogUser)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleLogUser::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pilot_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleLogUser::ArenaDtor(void* object) {
  BattleLogUser* _this = reinterpret_cast< BattleLogUser* >(object);
  (void)_this;
}
void BattleLogUser::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleLogUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleLogUser& BattleLogUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleLogUser_battlelog_2eproto.base);
  return *internal_default_instance();
}


void BattleLogUser::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleLogUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pilot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&battle_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lose_count_) -
      reinterpret_cast<char*>(&battle_count_)) + sizeof(lose_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleLogUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.user_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pilot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pilot_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.pilot_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes game_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_game_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 battle_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          battle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 win_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          win_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lose_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          lose_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogUser.platform"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleLogUser::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleLogUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.user_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_name(), target);
  }

  // string pilot_name = 3;
  if (this->pilot_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pilot_name().data(), static_cast<int>(this->_internal_pilot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.pilot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pilot_name(), target);
  }

  // bytes game_param = 4;
  if (this->game_param().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_game_param(), target);
  }

  // int32 battle_count = 5;
  if (this->battle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_battle_count(), target);
  }

  // int32 win_count = 6;
  if (this->win_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_win_count(), target);
  }

  // int32 lose_count = 7;
  if (this->lose_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lose_count(), target);
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_platform().data(), static_cast<int>(this->_internal_platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogUser.platform");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_platform(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleLogUser)
  return target;
}

size_t BattleLogUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleLogUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string user_name = 2;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // string pilot_name = 3;
  if (this->pilot_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pilot_name());
  }

  // bytes game_param = 4;
  if (this->game_param().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_game_param());
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_platform());
  }

  // int32 battle_count = 5;
  if (this->battle_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_battle_count());
  }

  // int32 win_count = 6;
  if (this->win_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_win_count());
  }

  // int32 lose_count = 7;
  if (this->lose_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lose_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleLogUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleLogUser)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleLogUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleLogUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleLogUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleLogUser)
    MergeFrom(*source);
  }
}

void BattleLogUser::MergeFrom(const BattleLogUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleLogUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.user_name().size() > 0) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from.pilot_name().size() > 0) {
    _internal_set_pilot_name(from._internal_pilot_name());
  }
  if (from.game_param().size() > 0) {
    _internal_set_game_param(from._internal_game_param());
  }
  if (from.platform().size() > 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.battle_count() != 0) {
    _internal_set_battle_count(from._internal_battle_count());
  }
  if (from.win_count() != 0) {
    _internal_set_win_count(from._internal_win_count());
  }
  if (from.lose_count() != 0) {
    _internal_set_lose_count(from._internal_lose_count());
  }
}

void BattleLogUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleLogUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLogUser::CopyFrom(const BattleLogUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleLogUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLogUser::IsInitialized() const {
  return true;
}

void BattleLogUser::InternalSwap(BattleLogUser* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_name_.Swap(&other->user_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pilot_name_.Swap(&other->pilot_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_param_.Swap(&other->game_param_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleLogUser, lose_count_)
      + sizeof(BattleLogUser::lose_count_)
      - PROTOBUF_FIELD_OFFSET(BattleLogUser, battle_count_)>(
          reinterpret_cast<char*>(&battle_count_),
          reinterpret_cast<char*>(&other->battle_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleLogUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleLogMessage::InitAsDefaultInstance() {
}
class BattleLogMessage::_Internal {
 public:
};

BattleLogMessage::BattleLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleLogMessage)
}
BattleLogMessage::BattleLogMessage(const BattleLogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_id(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.BattleLogMessage)
}

void BattleLogMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleLogMessage_battlelog_2eproto.base);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(timestamp_));
}

BattleLogMessage::~BattleLogMessage() {
  // @@protoc_insertion_point(destructor:proto.BattleLogMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleLogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleLogMessage::ArenaDtor(void* object) {
  BattleLogMessage* _this = reinterpret_cast< BattleLogMessage* >(object);
  (void)_this;
}
void BattleLogMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleLogMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleLogMessage& BattleLogMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleLogMessage_battlelog_2eproto.base);
  return *internal_default_instance();
}


void BattleLogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleLogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleLogMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogMessage.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleLogMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleLogMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogMessage.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_seq(), target);
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleLogMessage)
  return target;
}

size_t BattleLogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleLogMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // uint32 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seq());
  }

  // int64 timestamp = 10;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleLogMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleLogMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleLogMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleLogMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleLogMessage)
    MergeFrom(*source);
  }
}

void BattleLogMessage::MergeFrom(const BattleLogMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleLogMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id().size() > 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void BattleLogMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLogMessage::CopyFrom(const BattleLogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleLogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLogMessage::IsInitialized() const {
  return true;
}

void BattleLogMessage::InternalSwap(BattleLogMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  user_id_.Swap(&other->user_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleLogMessage, timestamp_)
      + sizeof(BattleLogMessage::timestamp_)
      - PROTOBUF_FIELD_OFFSET(BattleLogMessage, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleLogMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BattleLogFile::InitAsDefaultInstance() {
}
class BattleLogFile::_Internal {
 public:
};

BattleLogFile::BattleLogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena),
  battle_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:proto.BattleLogFile)
}
BattleLogFile::BattleLogFile(const BattleLogFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_),
      battle_data_(from.battle_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gdxsv_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gdxsv_version().empty()) {
    gdxsv_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_gdxsv_version(),
      GetArena());
  }
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_code().empty()) {
    battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_battle_code(),
      GetArena());
  }
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_game_disk().empty()) {
    game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_game_disk(),
      GetArena());
  }
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rule_bin().empty()) {
    rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rule_bin(),
      GetArena());
  }
  ::memcpy(&log_file_version_, &from.log_file_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_at_) -
    reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
  // @@protoc_insertion_point(copy_constructor:proto.BattleLogFile)
}

void BattleLogFile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BattleLogFile_battlelog_2eproto.base);
  gdxsv_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_disk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&log_file_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_at_) -
      reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
}

BattleLogFile::~BattleLogFile() {
  // @@protoc_insertion_point(destructor:proto.BattleLogFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BattleLogFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gdxsv_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  battle_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_disk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_bin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BattleLogFile::ArenaDtor(void* object) {
  BattleLogFile* _this = reinterpret_cast< BattleLogFile* >(object);
  (void)_this;
}
void BattleLogFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BattleLogFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BattleLogFile& BattleLogFile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BattleLogFile_battlelog_2eproto.base);
  return *internal_default_instance();
}


void BattleLogFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattleLogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  battle_data_.Clear();
  gdxsv_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&log_file_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_at_) -
      reinterpret_cast<char*>(&log_file_version_)) + sizeof(end_at_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BattleLogFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gdxsv_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gdxsv_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.gdxsv_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string battle_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_battle_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.battle_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 log_file_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          log_file_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string game_disk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_game_disk();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "proto.BattleLogFile.game_disk"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rule_bin = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_rule_bin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleLogUser users = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .proto.BattleLogMessage battle_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battle_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 start_at = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          start_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 end_at = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          end_at_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BattleLogFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattleLogFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gdxsv_version = 2;
  if (this->gdxsv_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gdxsv_version().data(), static_cast<int>(this->_internal_gdxsv_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.gdxsv_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gdxsv_version(), target);
  }

  // string battle_code = 3;
  if (this->battle_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_battle_code().data(), static_cast<int>(this->_internal_battle_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.battle_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_battle_code(), target);
  }

  // int32 log_file_version = 4;
  if (this->log_file_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_log_file_version(), target);
  }

  // string game_disk = 5;
  if (this->game_disk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_game_disk().data(), static_cast<int>(this->_internal_game_disk().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.BattleLogFile.game_disk");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_game_disk(), target);
  }

  // bytes rule_bin = 10;
  if (this->rule_bin().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_rule_bin(), target);
  }

  // repeated .proto.BattleLogUser users = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_users(i), target, stream);
  }

  // repeated .proto.BattleLogMessage battle_data = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battle_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_battle_data(i), target, stream);
  }

  // int64 start_at = 20;
  if (this->start_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_start_at(), target);
  }

  // int64 end_at = 21;
  if (this->end_at() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_end_at(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattleLogFile)
  return target;
}

size_t BattleLogFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattleLogFile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.BattleLogUser users = 11;
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto.BattleLogMessage battle_data = 12;
  total_size += 1UL * this->_internal_battle_data_size();
  for (const auto& msg : this->battle_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string gdxsv_version = 2;
  if (this->gdxsv_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gdxsv_version());
  }

  // string battle_code = 3;
  if (this->battle_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_battle_code());
  }

  // string game_disk = 5;
  if (this->game_disk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_game_disk());
  }

  // bytes rule_bin = 10;
  if (this->rule_bin().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_rule_bin());
  }

  // int32 log_file_version = 4;
  if (this->log_file_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_log_file_version());
  }

  // int64 start_at = 20;
  if (this->start_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_start_at());
  }

  // int64 end_at = 21;
  if (this->end_at() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_end_at());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BattleLogFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattleLogFile)
  GOOGLE_DCHECK_NE(&from, this);
  const BattleLogFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BattleLogFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattleLogFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattleLogFile)
    MergeFrom(*source);
  }
}

void BattleLogFile::MergeFrom(const BattleLogFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattleLogFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  battle_data_.MergeFrom(from.battle_data_);
  if (from.gdxsv_version().size() > 0) {
    _internal_set_gdxsv_version(from._internal_gdxsv_version());
  }
  if (from.battle_code().size() > 0) {
    _internal_set_battle_code(from._internal_battle_code());
  }
  if (from.game_disk().size() > 0) {
    _internal_set_game_disk(from._internal_game_disk());
  }
  if (from.rule_bin().size() > 0) {
    _internal_set_rule_bin(from._internal_rule_bin());
  }
  if (from.log_file_version() != 0) {
    _internal_set_log_file_version(from._internal_log_file_version());
  }
  if (from.start_at() != 0) {
    _internal_set_start_at(from._internal_start_at());
  }
  if (from.end_at() != 0) {
    _internal_set_end_at(from._internal_end_at());
  }
}

void BattleLogFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattleLogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleLogFile::CopyFrom(const BattleLogFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattleLogFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleLogFile::IsInitialized() const {
  return true;
}

void BattleLogFile::InternalSwap(BattleLogFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  battle_data_.InternalSwap(&other->battle_data_);
  gdxsv_version_.Swap(&other->gdxsv_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  battle_code_.Swap(&other->battle_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_disk_.Swap(&other->game_disk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  rule_bin_.Swap(&other->rule_bin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BattleLogFile, end_at_)
      + sizeof(BattleLogFile::end_at_)
      - PROTOBUF_FIELD_OFFSET(BattleLogFile, log_file_version_)>(
          reinterpret_cast<char*>(&log_file_version_),
          reinterpret_cast<char*>(&other->log_file_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BattleLogFile::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::BattleLogUser* Arena::CreateMaybeMessage< ::proto::BattleLogUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleLogUser >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BattleLogMessage* Arena::CreateMaybeMessage< ::proto::BattleLogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleLogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::BattleLogFile* Arena::CreateMaybeMessage< ::proto::BattleLogFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::BattleLogFile >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
