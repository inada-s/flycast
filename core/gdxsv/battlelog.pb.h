// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battlelog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_battlelog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_battlelog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_battlelog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_battlelog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_battlelog_2eproto;
namespace proto {
class BattleLogFile;
class BattleLogFileDefaultTypeInternal;
extern BattleLogFileDefaultTypeInternal _BattleLogFile_default_instance_;
class BattleLogMessage;
class BattleLogMessageDefaultTypeInternal;
extern BattleLogMessageDefaultTypeInternal _BattleLogMessage_default_instance_;
class BattleLogUser;
class BattleLogUserDefaultTypeInternal;
extern BattleLogUserDefaultTypeInternal _BattleLogUser_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BattleLogFile* Arena::CreateMaybeMessage<::proto::BattleLogFile>(Arena*);
template<> ::proto::BattleLogMessage* Arena::CreateMaybeMessage<::proto::BattleLogMessage>(Arena*);
template<> ::proto::BattleLogUser* Arena::CreateMaybeMessage<::proto::BattleLogUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class BattleLogUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleLogUser) */ {
 public:
  inline BattleLogUser() : BattleLogUser(nullptr) {}
  virtual ~BattleLogUser();

  BattleLogUser(const BattleLogUser& from);
  BattleLogUser(BattleLogUser&& from) noexcept
    : BattleLogUser() {
    *this = ::std::move(from);
  }

  inline BattleLogUser& operator=(const BattleLogUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleLogUser& operator=(BattleLogUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleLogUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleLogUser* internal_default_instance() {
    return reinterpret_cast<const BattleLogUser*>(
               &_BattleLogUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BattleLogUser& a, BattleLogUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleLogUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleLogUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleLogUser* New() const final {
    return CreateMaybeMessage<BattleLogUser>(nullptr);
  }

  BattleLogUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleLogUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleLogUser& from);
  void MergeFrom(const BattleLogUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleLogUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleLogUser";
  }
  protected:
  explicit BattleLogUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battlelog_2eproto);
    return ::descriptor_table_battlelog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kUserNameFieldNumber = 2,
    kPilotNameFieldNumber = 3,
    kGameParamFieldNumber = 4,
    kPlatformFieldNumber = 10,
    kBattleCountFieldNumber = 5,
    kWinCountFieldNumber = 6,
    kLoseCountFieldNumber = 7,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string user_name = 2;
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string pilot_name = 3;
  void clear_pilot_name();
  const std::string& pilot_name() const;
  void set_pilot_name(const std::string& value);
  void set_pilot_name(std::string&& value);
  void set_pilot_name(const char* value);
  void set_pilot_name(const char* value, size_t size);
  std::string* mutable_pilot_name();
  std::string* release_pilot_name();
  void set_allocated_pilot_name(std::string* pilot_name);
  private:
  const std::string& _internal_pilot_name() const;
  void _internal_set_pilot_name(const std::string& value);
  std::string* _internal_mutable_pilot_name();
  public:

  // bytes game_param = 4;
  void clear_game_param();
  const std::string& game_param() const;
  void set_game_param(const std::string& value);
  void set_game_param(std::string&& value);
  void set_game_param(const char* value);
  void set_game_param(const void* value, size_t size);
  std::string* mutable_game_param();
  std::string* release_game_param();
  void set_allocated_game_param(std::string* game_param);
  private:
  const std::string& _internal_game_param() const;
  void _internal_set_game_param(const std::string& value);
  std::string* _internal_mutable_game_param();
  public:

  // string platform = 10;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // int32 battle_count = 5;
  void clear_battle_count();
  ::PROTOBUF_NAMESPACE_ID::int32 battle_count() const;
  void set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battle_count() const;
  void _internal_set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 win_count = 6;
  void clear_win_count();
  ::PROTOBUF_NAMESPACE_ID::int32 win_count() const;
  void set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_win_count() const;
  void _internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 lose_count = 7;
  void clear_lose_count();
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count() const;
  void set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose_count() const;
  void _internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleLogUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pilot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::int32 battle_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 win_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 lose_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battlelog_2eproto;
};
// -------------------------------------------------------------------

class BattleLogMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleLogMessage) */ {
 public:
  inline BattleLogMessage() : BattleLogMessage(nullptr) {}
  virtual ~BattleLogMessage();

  BattleLogMessage(const BattleLogMessage& from);
  BattleLogMessage(BattleLogMessage&& from) noexcept
    : BattleLogMessage() {
    *this = ::std::move(from);
  }

  inline BattleLogMessage& operator=(const BattleLogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleLogMessage& operator=(BattleLogMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleLogMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleLogMessage* internal_default_instance() {
    return reinterpret_cast<const BattleLogMessage*>(
               &_BattleLogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BattleLogMessage& a, BattleLogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleLogMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleLogMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleLogMessage* New() const final {
    return CreateMaybeMessage<BattleLogMessage>(nullptr);
  }

  BattleLogMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleLogMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleLogMessage& from);
  void MergeFrom(const BattleLogMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleLogMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleLogMessage";
  }
  protected:
  explicit BattleLogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battlelog_2eproto);
    return ::descriptor_table_battlelog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kBodyFieldNumber = 2,
    kSeqFieldNumber = 3,
    kTimestampFieldNumber = 10,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  void set_user_id(const std::string& value);
  void set_user_id(std::string&& value);
  void set_user_id(const char* value);
  void set_user_id(const char* value, size_t size);
  std::string* mutable_user_id();
  std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // uint32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::uint32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 timestamp = 10;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleLogMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battlelog_2eproto;
};
// -------------------------------------------------------------------

class BattleLogFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BattleLogFile) */ {
 public:
  inline BattleLogFile() : BattleLogFile(nullptr) {}
  virtual ~BattleLogFile();

  BattleLogFile(const BattleLogFile& from);
  BattleLogFile(BattleLogFile&& from) noexcept
    : BattleLogFile() {
    *this = ::std::move(from);
  }

  inline BattleLogFile& operator=(const BattleLogFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleLogFile& operator=(BattleLogFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BattleLogFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BattleLogFile* internal_default_instance() {
    return reinterpret_cast<const BattleLogFile*>(
               &_BattleLogFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BattleLogFile& a, BattleLogFile& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleLogFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleLogFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleLogFile* New() const final {
    return CreateMaybeMessage<BattleLogFile>(nullptr);
  }

  BattleLogFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleLogFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleLogFile& from);
  void MergeFrom(const BattleLogFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleLogFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BattleLogFile";
  }
  protected:
  explicit BattleLogFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_battlelog_2eproto);
    return ::descriptor_table_battlelog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 11,
    kBattleDataFieldNumber = 12,
    kGdxsvVersionFieldNumber = 2,
    kBattleCodeFieldNumber = 3,
    kGameDiskFieldNumber = 5,
    kRuleBinFieldNumber = 10,
    kLogFileVersionFieldNumber = 4,
    kStartAtFieldNumber = 20,
    kEndAtFieldNumber = 21,
  };
  // repeated .proto.BattleLogUser users = 11;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::proto::BattleLogUser* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
      mutable_users();
  private:
  const ::proto::BattleLogUser& _internal_users(int index) const;
  ::proto::BattleLogUser* _internal_add_users();
  public:
  const ::proto::BattleLogUser& users(int index) const;
  ::proto::BattleLogUser* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
      users() const;

  // repeated .proto.BattleLogMessage battle_data = 12;
  int battle_data_size() const;
  private:
  int _internal_battle_data_size() const;
  public:
  void clear_battle_data();
  ::proto::BattleLogMessage* mutable_battle_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogMessage >*
      mutable_battle_data();
  private:
  const ::proto::BattleLogMessage& _internal_battle_data(int index) const;
  ::proto::BattleLogMessage* _internal_add_battle_data();
  public:
  const ::proto::BattleLogMessage& battle_data(int index) const;
  ::proto::BattleLogMessage* add_battle_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogMessage >&
      battle_data() const;

  // string gdxsv_version = 2;
  void clear_gdxsv_version();
  const std::string& gdxsv_version() const;
  void set_gdxsv_version(const std::string& value);
  void set_gdxsv_version(std::string&& value);
  void set_gdxsv_version(const char* value);
  void set_gdxsv_version(const char* value, size_t size);
  std::string* mutable_gdxsv_version();
  std::string* release_gdxsv_version();
  void set_allocated_gdxsv_version(std::string* gdxsv_version);
  private:
  const std::string& _internal_gdxsv_version() const;
  void _internal_set_gdxsv_version(const std::string& value);
  std::string* _internal_mutable_gdxsv_version();
  public:

  // string battle_code = 3;
  void clear_battle_code();
  const std::string& battle_code() const;
  void set_battle_code(const std::string& value);
  void set_battle_code(std::string&& value);
  void set_battle_code(const char* value);
  void set_battle_code(const char* value, size_t size);
  std::string* mutable_battle_code();
  std::string* release_battle_code();
  void set_allocated_battle_code(std::string* battle_code);
  private:
  const std::string& _internal_battle_code() const;
  void _internal_set_battle_code(const std::string& value);
  std::string* _internal_mutable_battle_code();
  public:

  // string game_disk = 5;
  void clear_game_disk();
  const std::string& game_disk() const;
  void set_game_disk(const std::string& value);
  void set_game_disk(std::string&& value);
  void set_game_disk(const char* value);
  void set_game_disk(const char* value, size_t size);
  std::string* mutable_game_disk();
  std::string* release_game_disk();
  void set_allocated_game_disk(std::string* game_disk);
  private:
  const std::string& _internal_game_disk() const;
  void _internal_set_game_disk(const std::string& value);
  std::string* _internal_mutable_game_disk();
  public:

  // bytes rule_bin = 10;
  void clear_rule_bin();
  const std::string& rule_bin() const;
  void set_rule_bin(const std::string& value);
  void set_rule_bin(std::string&& value);
  void set_rule_bin(const char* value);
  void set_rule_bin(const void* value, size_t size);
  std::string* mutable_rule_bin();
  std::string* release_rule_bin();
  void set_allocated_rule_bin(std::string* rule_bin);
  private:
  const std::string& _internal_rule_bin() const;
  void _internal_set_rule_bin(const std::string& value);
  std::string* _internal_mutable_rule_bin();
  public:

  // int32 log_file_version = 4;
  void clear_log_file_version();
  ::PROTOBUF_NAMESPACE_ID::int32 log_file_version() const;
  void set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_log_file_version() const;
  void _internal_set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 start_at = 20;
  void clear_start_at();
  ::PROTOBUF_NAMESPACE_ID::int64 start_at() const;
  void set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_start_at() const;
  void _internal_set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 end_at = 21;
  void clear_end_at();
  ::PROTOBUF_NAMESPACE_ID::int64 end_at() const;
  void set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_end_at() const;
  void _internal_set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BattleLogFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser > users_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogMessage > battle_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gdxsv_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_disk_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_bin_;
  ::PROTOBUF_NAMESPACE_ID::int32 log_file_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_battlelog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BattleLogUser

// string user_id = 1;
inline void BattleLogUser::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::user_id() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.user_id)
  return _internal_user_id();
}
inline void BattleLogUser::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.user_id)
}
inline std::string* BattleLogUser::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& BattleLogUser::_internal_user_id() const {
  return user_id_.Get();
}
inline void BattleLogUser::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.user_id)
}
inline void BattleLogUser::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.user_id)
}
inline void BattleLogUser::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.user_id)
}
inline std::string* BattleLogUser::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.user_id)
}

// string user_name = 2;
inline void BattleLogUser::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::user_name() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.user_name)
  return _internal_user_name();
}
inline void BattleLogUser::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.user_name)
}
inline std::string* BattleLogUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& BattleLogUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void BattleLogUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.user_name)
}
inline void BattleLogUser::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.user_name)
}
inline void BattleLogUser::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.user_name)
}
inline std::string* BattleLogUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_user_name() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.user_name)
}

// string pilot_name = 3;
inline void BattleLogUser::clear_pilot_name() {
  pilot_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::pilot_name() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.pilot_name)
  return _internal_pilot_name();
}
inline void BattleLogUser::set_pilot_name(const std::string& value) {
  _internal_set_pilot_name(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.pilot_name)
}
inline std::string* BattleLogUser::mutable_pilot_name() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.pilot_name)
  return _internal_mutable_pilot_name();
}
inline const std::string& BattleLogUser::_internal_pilot_name() const {
  return pilot_name_.Get();
}
inline void BattleLogUser::_internal_set_pilot_name(const std::string& value) {
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_pilot_name(std::string&& value) {
  
  pilot_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.pilot_name)
}
inline void BattleLogUser::set_pilot_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.pilot_name)
}
inline void BattleLogUser::set_pilot_name(const char* value,
    size_t size) {
  
  pilot_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.pilot_name)
}
inline std::string* BattleLogUser::_internal_mutable_pilot_name() {
  
  return pilot_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_pilot_name() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.pilot_name)
  return pilot_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_pilot_name(std::string* pilot_name) {
  if (pilot_name != nullptr) {
    
  } else {
    
  }
  pilot_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pilot_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.pilot_name)
}

// bytes game_param = 4;
inline void BattleLogUser::clear_game_param() {
  game_param_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::game_param() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.game_param)
  return _internal_game_param();
}
inline void BattleLogUser::set_game_param(const std::string& value) {
  _internal_set_game_param(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.game_param)
}
inline std::string* BattleLogUser::mutable_game_param() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.game_param)
  return _internal_mutable_game_param();
}
inline const std::string& BattleLogUser::_internal_game_param() const {
  return game_param_.Get();
}
inline void BattleLogUser::_internal_set_game_param(const std::string& value) {
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_game_param(std::string&& value) {
  
  game_param_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.game_param)
}
inline void BattleLogUser::set_game_param(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.game_param)
}
inline void BattleLogUser::set_game_param(const void* value,
    size_t size) {
  
  game_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.game_param)
}
inline std::string* BattleLogUser::_internal_mutable_game_param() {
  
  return game_param_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_game_param() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.game_param)
  return game_param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_game_param(std::string* game_param) {
  if (game_param != nullptr) {
    
  } else {
    
  }
  game_param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_param,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.game_param)
}

// int32 battle_count = 5;
inline void BattleLogUser::clear_battle_count() {
  battle_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_battle_count() const {
  return battle_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::battle_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.battle_count)
  return _internal_battle_count();
}
inline void BattleLogUser::_internal_set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battle_count_ = value;
}
inline void BattleLogUser::set_battle_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battle_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.battle_count)
}

// int32 win_count = 6;
inline void BattleLogUser::clear_win_count() {
  win_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_win_count() const {
  return win_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::win_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.win_count)
  return _internal_win_count();
}
inline void BattleLogUser::_internal_set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  win_count_ = value;
}
inline void BattleLogUser::set_win_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_win_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.win_count)
}

// int32 lose_count = 7;
inline void BattleLogUser::clear_lose_count() {
  lose_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::_internal_lose_count() const {
  return lose_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogUser::lose_count() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.lose_count)
  return _internal_lose_count();
}
inline void BattleLogUser::_internal_set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lose_count_ = value;
}
inline void BattleLogUser::set_lose_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lose_count(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.lose_count)
}

// string platform = 10;
inline void BattleLogUser::clear_platform() {
  platform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogUser::platform() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogUser.platform)
  return _internal_platform();
}
inline void BattleLogUser::set_platform(const std::string& value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogUser.platform)
}
inline std::string* BattleLogUser::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogUser.platform)
  return _internal_mutable_platform();
}
inline const std::string& BattleLogUser::_internal_platform() const {
  return platform_.Get();
}
inline void BattleLogUser::_internal_set_platform(const std::string& value) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogUser::set_platform(std::string&& value) {
  
  platform_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogUser.platform)
}
inline void BattleLogUser::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogUser.platform)
}
inline void BattleLogUser::set_platform(const char* value,
    size_t size) {
  
  platform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogUser.platform)
}
inline std::string* BattleLogUser::_internal_mutable_platform() {
  
  return platform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogUser::release_platform() {
  // @@protoc_insertion_point(field_release:proto.BattleLogUser.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogUser::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogUser.platform)
}

// -------------------------------------------------------------------

// BattleLogMessage

// string user_id = 1;
inline void BattleLogMessage::clear_user_id() {
  user_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogMessage::user_id() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogMessage.user_id)
  return _internal_user_id();
}
inline void BattleLogMessage::set_user_id(const std::string& value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogMessage.user_id)
}
inline std::string* BattleLogMessage::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogMessage.user_id)
  return _internal_mutable_user_id();
}
inline const std::string& BattleLogMessage::_internal_user_id() const {
  return user_id_.Get();
}
inline void BattleLogMessage::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogMessage::set_user_id(std::string&& value) {
  
  user_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogMessage.user_id)
}
inline void BattleLogMessage::set_user_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogMessage.user_id)
}
inline void BattleLogMessage::set_user_id(const char* value,
    size_t size) {
  
  user_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogMessage.user_id)
}
inline std::string* BattleLogMessage::_internal_mutable_user_id() {
  
  return user_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogMessage::release_user_id() {
  // @@protoc_insertion_point(field_release:proto.BattleLogMessage.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogMessage::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogMessage.user_id)
}

// bytes body = 2;
inline void BattleLogMessage::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogMessage::body() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogMessage.body)
  return _internal_body();
}
inline void BattleLogMessage::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogMessage.body)
}
inline std::string* BattleLogMessage::mutable_body() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogMessage.body)
  return _internal_mutable_body();
}
inline const std::string& BattleLogMessage::_internal_body() const {
  return body_.Get();
}
inline void BattleLogMessage::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogMessage::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogMessage.body)
}
inline void BattleLogMessage::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogMessage.body)
}
inline void BattleLogMessage::set_body(const void* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogMessage.body)
}
inline std::string* BattleLogMessage::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogMessage::release_body() {
  // @@protoc_insertion_point(field_release:proto.BattleLogMessage.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogMessage::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogMessage.body)
}

// uint32 seq = 3;
inline void BattleLogMessage::clear_seq() {
  seq_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleLogMessage::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BattleLogMessage::seq() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogMessage.seq)
  return _internal_seq();
}
inline void BattleLogMessage::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seq_ = value;
}
inline void BattleLogMessage::set_seq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogMessage.seq)
}

// int64 timestamp = 10;
inline void BattleLogMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogMessage::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogMessage.timestamp)
  return _internal_timestamp();
}
inline void BattleLogMessage::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void BattleLogMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogMessage.timestamp)
}

// -------------------------------------------------------------------

// BattleLogFile

// string game_disk = 5;
inline void BattleLogFile::clear_game_disk() {
  game_disk_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::game_disk() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.game_disk)
  return _internal_game_disk();
}
inline void BattleLogFile::set_game_disk(const std::string& value) {
  _internal_set_game_disk(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.game_disk)
}
inline std::string* BattleLogFile::mutable_game_disk() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.game_disk)
  return _internal_mutable_game_disk();
}
inline const std::string& BattleLogFile::_internal_game_disk() const {
  return game_disk_.Get();
}
inline void BattleLogFile::_internal_set_game_disk(const std::string& value) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_game_disk(std::string&& value) {
  
  game_disk_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.game_disk)
}
inline void BattleLogFile::set_game_disk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.game_disk)
}
inline void BattleLogFile::set_game_disk(const char* value,
    size_t size) {
  
  game_disk_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.game_disk)
}
inline std::string* BattleLogFile::_internal_mutable_game_disk() {
  
  return game_disk_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_game_disk() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.game_disk)
  return game_disk_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_game_disk(std::string* game_disk) {
  if (game_disk != nullptr) {
    
  } else {
    
  }
  game_disk_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_disk,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.game_disk)
}

// string gdxsv_version = 2;
inline void BattleLogFile::clear_gdxsv_version() {
  gdxsv_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::gdxsv_version() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.gdxsv_version)
  return _internal_gdxsv_version();
}
inline void BattleLogFile::set_gdxsv_version(const std::string& value) {
  _internal_set_gdxsv_version(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.gdxsv_version)
}
inline std::string* BattleLogFile::mutable_gdxsv_version() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.gdxsv_version)
  return _internal_mutable_gdxsv_version();
}
inline const std::string& BattleLogFile::_internal_gdxsv_version() const {
  return gdxsv_version_.Get();
}
inline void BattleLogFile::_internal_set_gdxsv_version(const std::string& value) {
  
  gdxsv_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_gdxsv_version(std::string&& value) {
  
  gdxsv_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.gdxsv_version)
}
inline void BattleLogFile::set_gdxsv_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gdxsv_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.gdxsv_version)
}
inline void BattleLogFile::set_gdxsv_version(const char* value,
    size_t size) {
  
  gdxsv_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.gdxsv_version)
}
inline std::string* BattleLogFile::_internal_mutable_gdxsv_version() {
  
  return gdxsv_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_gdxsv_version() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.gdxsv_version)
  return gdxsv_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_gdxsv_version(std::string* gdxsv_version) {
  if (gdxsv_version != nullptr) {
    
  } else {
    
  }
  gdxsv_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gdxsv_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.gdxsv_version)
}

// string battle_code = 3;
inline void BattleLogFile::clear_battle_code() {
  battle_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::battle_code() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.battle_code)
  return _internal_battle_code();
}
inline void BattleLogFile::set_battle_code(const std::string& value) {
  _internal_set_battle_code(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.battle_code)
}
inline std::string* BattleLogFile::mutable_battle_code() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.battle_code)
  return _internal_mutable_battle_code();
}
inline const std::string& BattleLogFile::_internal_battle_code() const {
  return battle_code_.Get();
}
inline void BattleLogFile::_internal_set_battle_code(const std::string& value) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_battle_code(std::string&& value) {
  
  battle_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.battle_code)
}
inline void BattleLogFile::set_battle_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.battle_code)
}
inline void BattleLogFile::set_battle_code(const char* value,
    size_t size) {
  
  battle_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.battle_code)
}
inline std::string* BattleLogFile::_internal_mutable_battle_code() {
  
  return battle_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_battle_code() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.battle_code)
  return battle_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_battle_code(std::string* battle_code) {
  if (battle_code != nullptr) {
    
  } else {
    
  }
  battle_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.battle_code)
}

// int32 log_file_version = 4;
inline void BattleLogFile::clear_log_file_version() {
  log_file_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::_internal_log_file_version() const {
  return log_file_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleLogFile::log_file_version() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.log_file_version)
  return _internal_log_file_version();
}
inline void BattleLogFile::_internal_set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  log_file_version_ = value;
}
inline void BattleLogFile::set_log_file_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_log_file_version(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.log_file_version)
}

// bytes rule_bin = 10;
inline void BattleLogFile::clear_rule_bin() {
  rule_bin_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BattleLogFile::rule_bin() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.rule_bin)
  return _internal_rule_bin();
}
inline void BattleLogFile::set_rule_bin(const std::string& value) {
  _internal_set_rule_bin(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.rule_bin)
}
inline std::string* BattleLogFile::mutable_rule_bin() {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.rule_bin)
  return _internal_mutable_rule_bin();
}
inline const std::string& BattleLogFile::_internal_rule_bin() const {
  return rule_bin_.Get();
}
inline void BattleLogFile::_internal_set_rule_bin(const std::string& value) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BattleLogFile::set_rule_bin(std::string&& value) {
  
  rule_bin_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.BattleLogFile.rule_bin)
}
inline void BattleLogFile::set_rule_bin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.BattleLogFile.rule_bin)
}
inline void BattleLogFile::set_rule_bin(const void* value,
    size_t size) {
  
  rule_bin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.BattleLogFile.rule_bin)
}
inline std::string* BattleLogFile::_internal_mutable_rule_bin() {
  
  return rule_bin_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BattleLogFile::release_rule_bin() {
  // @@protoc_insertion_point(field_release:proto.BattleLogFile.rule_bin)
  return rule_bin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BattleLogFile::set_allocated_rule_bin(std::string* rule_bin) {
  if (rule_bin != nullptr) {
    
  } else {
    
  }
  rule_bin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_bin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.BattleLogFile.rule_bin)
}

// repeated .proto.BattleLogUser users = 11;
inline int BattleLogFile::_internal_users_size() const {
  return users_.size();
}
inline int BattleLogFile::users_size() const {
  return _internal_users_size();
}
inline void BattleLogFile::clear_users() {
  users_.Clear();
}
inline ::proto::BattleLogUser* BattleLogFile::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >*
BattleLogFile::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.users)
  return &users_;
}
inline const ::proto::BattleLogUser& BattleLogFile::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::proto::BattleLogUser& BattleLogFile::users(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.users)
  return _internal_users(index);
}
inline ::proto::BattleLogUser* BattleLogFile::_internal_add_users() {
  return users_.Add();
}
inline ::proto::BattleLogUser* BattleLogFile::add_users() {
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogUser >&
BattleLogFile::users() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.users)
  return users_;
}

// repeated .proto.BattleLogMessage battle_data = 12;
inline int BattleLogFile::_internal_battle_data_size() const {
  return battle_data_.size();
}
inline int BattleLogFile::battle_data_size() const {
  return _internal_battle_data_size();
}
inline void BattleLogFile::clear_battle_data() {
  battle_data_.Clear();
}
inline ::proto::BattleLogMessage* BattleLogFile::mutable_battle_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattleLogFile.battle_data)
  return battle_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogMessage >*
BattleLogFile::mutable_battle_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattleLogFile.battle_data)
  return &battle_data_;
}
inline const ::proto::BattleLogMessage& BattleLogFile::_internal_battle_data(int index) const {
  return battle_data_.Get(index);
}
inline const ::proto::BattleLogMessage& BattleLogFile::battle_data(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.battle_data)
  return _internal_battle_data(index);
}
inline ::proto::BattleLogMessage* BattleLogFile::_internal_add_battle_data() {
  return battle_data_.Add();
}
inline ::proto::BattleLogMessage* BattleLogFile::add_battle_data() {
  // @@protoc_insertion_point(field_add:proto.BattleLogFile.battle_data)
  return _internal_add_battle_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::BattleLogMessage >&
BattleLogFile::battle_data() const {
  // @@protoc_insertion_point(field_list:proto.BattleLogFile.battle_data)
  return battle_data_;
}

// int64 start_at = 20;
inline void BattleLogFile::clear_start_at() {
  start_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::_internal_start_at() const {
  return start_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::start_at() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.start_at)
  return _internal_start_at();
}
inline void BattleLogFile::_internal_set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_at_ = value;
}
inline void BattleLogFile::set_start_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_start_at(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.start_at)
}

// int64 end_at = 21;
inline void BattleLogFile::clear_end_at() {
  end_at_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::_internal_end_at() const {
  return end_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleLogFile::end_at() const {
  // @@protoc_insertion_point(field_get:proto.BattleLogFile.end_at)
  return _internal_end_at();
}
inline void BattleLogFile::_internal_set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_at_ = value;
}
inline void BattleLogFile::set_end_at(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_end_at(value);
  // @@protoc_insertion_point(field_set:proto.BattleLogFile.end_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_battlelog_2eproto
